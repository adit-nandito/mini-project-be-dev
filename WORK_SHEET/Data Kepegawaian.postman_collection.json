{
	"info": {
		"_postman_id": "c3ae7266-a84a-4e78-b0f4-8781adf644f2",
		"name": "Data Kepegawaian",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27821968"
	},
	"item": [
		{
			"name": "Employee",
			"item": [
				{
					"name": "Get List Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/employee/v1/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"list"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Report Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/employee/v1/report",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"report"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Detail Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/employee/v1/detail",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"detail"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Insert Data Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nik\": \"124132426\",\n    \"name\": \"Tester ProfPic\",\n    \"startDate\": \"2020-02-13\",\n    \"endDate\": \"2027-02-13\",\n    \"userName\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/employee/v1/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"create"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Insert Biodata Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nik",
									"value": "11015",
									"type": "text"
								},
								{
									"key": "name",
									"value": "John Doe",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2023-09-25",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "2030-09-25",
									"type": "text"
								},
								{
									"key": "userName",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "placeOfBirth",
									"value": "Jakarta",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1990-01-01",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "Laki-laki",
									"type": "text"
								},
								{
									"key": "isMarried",
									"value": "true",
									"type": "text"
								},
								{
									"key": "profPict",
									"type": "file",
									"src": "20211204_054922_0000.png"
								},
								{
									"key": "familyData",
									"value": "[{\"name\":\"Anna Doe\",\"identifier\":\"3210059410980001\",\"job\":\"Ibu Rumah Tangga\",\"relationStatus\":\"Istri\",\"placeOfBirth\":\"Semarang\",\"dateOfBirth\":\"1950-11-24\",\"religion\":\"Islam\",\"isLife\":true,\"isDivorced\":false}]",
									"type": "text"
								},
								{
									"key": "educationData",
									"value": "[{\"name\":\"Universitas Indonesia\",\"level\":\"Strata 1\",\"description\":\"Sarjana\"},{\"name\":\"SMA 1 Jakarta\",\"level\":\"Sma\",\"description\":\"High School\"}]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/employee/v1/create-biodata",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"create-biodata"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Biodata Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "4",
									"type": "text"
								},
								{
									"key": "nik",
									"value": "11015",
									"type": "text"
								},
								{
									"key": "name",
									"value": "John Doe",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2023-09-25",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "2030-09-25",
									"type": "text"
								},
								{
									"key": "userName",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "placeOfBirth",
									"value": "Jakarta",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1990-01-01",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "Laki-laki",
									"type": "text"
								},
								{
									"key": "isMarried",
									"value": "true",
									"type": "text"
								},
								{
									"key": "familyData",
									"value": "[{\"name\":\"Anna Doe\",\"identifier\":\"3210059410980001\",\"job\":\"Ibu Rumah Tangga\",\"relationStatus\":\"Istri\",\"placeOfBirth\":\"Semarang\",\"dateOfBirth\":\"1950-11-24\",\"religion\":\"Islam\",\"isLife\":true,\"isDivorced\":false}]",
									"type": "text"
								},
								{
									"key": "educationData",
									"value": "[{\"name\":\"Universitas Indonesia\",\"level\":\"Strata 1\",\"description\":\"Sarjana\"},{\"name\":\"SMA 1 Jakarta\",\"level\":\"Sma\",\"description\":\"High School\"}]",
									"type": "text"
								},
								{
									"key": "profPict",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/employee/v1/update-biodata",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"update-biodata"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Data Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"nik\": \"111106\",\n    \"name\": \"Budi\",\n    \"startDate\": \"2020-02-13\",\n    \"endDate\": \"2026-02-13\",\n    \"userName\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/employee/v1/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"update"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/employee/v1/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"v1",
								"delete"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Get List Employee Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/profile/v1/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"profile",
								"v1",
								"list"
							],
							"query": [
								{
									"key": "name",
									"value": "buy",
									"disabled": true
								},
								{
									"key": "date",
									"value": "2024-09-23",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Insert Employee Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "employeeId",
									"value": "2",
									"type": "text"
								},
								{
									"key": "placeOfBirth",
									"value": "Bekasi",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1996-02-12",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "Laki-laki",
									"type": "text"
								},
								{
									"key": "isMarried",
									"value": "true",
									"type": "text"
								},
								{
									"key": "profPict",
									"type": "file",
									"src": "20211204_054922_0000.png"
								},
								{
									"key": "userName",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/profile/v1/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"profile",
								"v1",
								"create"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Employee Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "employeeId",
									"value": "3",
									"type": "text"
								},
								{
									"key": "placeOfBirth",
									"value": "Bandung",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1992-02-12",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "Laki-laki",
									"type": "text"
								},
								{
									"key": "isMarried",
									"value": "true",
									"type": "text"
								},
								{
									"key": "userName",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "profPict",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/profile/v1/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"profile",
								"v1",
								"update"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Employee Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/profile/v1/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"profile",
								"v1",
								"delete"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Family",
			"item": [
				{
					"name": "Get List Employee Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/family/v1/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"family",
								"v1",
								"list"
							],
							"query": [
								{
									"key": "name",
									"value": "buy",
									"disabled": true
								},
								{
									"key": "date",
									"value": "2024-09-23",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Employee Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 2,\n    \"name\": \"Fulanah\",\n    \"identifier\": \"2134568783\",\n    \"job\": \"\",\n    \"relationStatus\": \"Anak Sambung\",\n    \"placeOfBirth\": \"Bandung\",\n    \"dateOfBirth\": \"2020-02-12\",\n    \"religion\": \"Islam\",\n    \"isLife\": true,\n    \"isDivorced\": false,\n    \"userName\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/family/v1/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"family",
								"v1",
								"create"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Employee Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 2,\n    \"name\": \"Eko\",\n    \"identifier\": \"2134568783\",\n    \"job\": \"Pengusaha\",\n    \"relationStatus\": \"Suami\",\n    \"placeOfBirth\": \"Bandung\",\n    \"dateOfBirth\": \"1993-02-12\",\n    \"religion\": \"Islam\",\n    \"isLife\": true,\n    \"isDivorced\": false,\n    \"userName\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/family/v1/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"family",
								"v1",
								"update"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Employee Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/family/v1/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"family",
								"v1",
								"delete"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "Get List Employee Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/education/v1/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"education",
								"v1",
								"list"
							],
							"query": [
								{
									"key": "name",
									"value": "buy",
									"disabled": true
								},
								{
									"key": "date",
									"value": "2024-09-23",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Employee Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"employeeId\": 2,\n    \"name\": \"Universitas Indonesia\",\n    \"level\": \"Doktor\",\n    \"description\": \"Doktor\",\n    \"userName\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/education/v1/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"education",
								"v1",
								"create"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Employee Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 7,\n    \"name\": \"Universitas Indonesia\",\n    \"level\": \"Profesor\",\n    \"description\": \"Profesor\",\n    \"userName\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/education/v1/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"education",
								"v1",
								"update"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete  Employee Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/education/v1/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"education",
								"v1",
								"delete"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "localhost:5001/api",
			"type": "string"
		}
	]
}